#pragma once

#include <Windows.h>
#include <d3d11.h>


#include "blender.h"

#include "DXTKaudio.h"
#include "texture.h"
//
#include "assain.h"
#include "Vector.h"
#include"util.h"
#include"primitive2d.h"

namespace mylib
{

    void init(LPCTSTR, int width = (640), int height = (480),
        bool isFullscreen = (false), double frameRate = (60.0));

    void uninit();


    bool gameLoop(bool isShowFrameRate = (false));

  
    void clear(const VECTOR4&);

    //--------------------------------------------------------------
  //  画面フリップ
  //--------------------------------------------------------------
  //  UINT SyncInterval       1を設定
  //  UINT Flags              0を設定
  //--------------------------------------------------------------
    HRESULT present(UINT SyncInterval = (1), UINT Flags = (0));

    //--------------------------------------------------------------
    //  ブレンドモード設定
    //--------------------------------------------------------------
    //  const Blender::BLEND_STATE& blend      ブレンドステート
    //--------------------------------------------------------------
    void setBlendMode(blender::BLEND_STATE);

    void sprite_load(sprite** ppSpr, const wchar_t* fileName, int nBufSize);

    void sprite_render(sprite*,
        float, float, float sx = (1.0f), float sy = (1.0f),
        float tx = (0.0f), float ty = (0.0f), float tw = (0.0f), float th = (0.0f),
        float cx = (0.0f), float cy = (0.0f), float angle = (0.0f),
        float r = (1.0f), float g = (1.0f), float b = (1.0f), float a = (1.0f),
        bool world = (false));

    blender::BLEND_STATE getBlendMode();

    namespace DirectX11
    {

        //--------------------------------------------------------------
        //  DirectX11の初期化
        //--------------------------------------------------------------
        //  HWND hwnd           ウインドウハンドル
        //  int width           ウインドウの幅
        //  int height          ウインドウの高さ
        //  bool isFullscreen   フルスクリーンにするかどうか
        //--------------------------------------------------------------
        HRESULT init(HWND, int, int, bool);

        //--------------------------------------------------------------
        //  DirectX11の終了処理
        //--------------------------------------------------------------
        void uninit();

    }


    namespace music
    {

        //--------------------------------------------------------------
        //  音楽のロード
        //--------------------------------------------------------------
        //  int trackNo    読み込むトラックのインデックス(0 ~ 31)
        //  const wchar_t* 音楽ファイルのパス(*.wav形式のみ)
        //  float volume   音楽のボリューム(0.0f ~ 1.0f)
        //--------------------------------------------------------------
        void load(int, const wchar_t*, float volume = (0.5f));

        //--------------------------------------------------------------
        //  音楽の解放
        //--------------------------------------------------------------
        //  int trackNo    解放するトラックのインデックス(0 ~ 31)
        //--------------------------------------------------------------
        void unload(int);

        //--------------------------------------------------------------
        //  音楽の再生
        //--------------------------------------------------------------
        //  int trackNo    再生するトラックのインデックス(0 ~ 31)
        //  bool isLoop    ループ再生するかどうか(する:true,しない:false)
        //--------------------------------------------------------------
        void play(int, bool isLoop = (false));

        //--------------------------------------------------------------
        //  音楽の停止
        //--------------------------------------------------------------
        //  int trackNo    停止するトラックのインデックス(0 ~ 31)
        //--------------------------------------------------------------
        void stop(int);

        //--------------------------------------------------------------
        //  音楽の一時停止
        //--------------------------------------------------------------
        //  int trackNo    一時停止するトラックのインデックス(0 ~ 31)
        //--------------------------------------------------------------
        void pause(int);

        //--------------------------------------------------------------
        //  音楽の再開(pauseからの再開)
        //--------------------------------------------------------------
        //  int trackNo    再開させるトラックのインデックス(0 ~ 31)
        //--------------------------------------------------------------
        void resume(int);

        //--------------------------------------------------------------
        //  音楽のボリューム設定
        //--------------------------------------------------------------
        //  int trackNo    再開させるトラックのインデックス(0 ~ 31)
        //  float volume   音楽のボリューム(0.0f ~ 1.0f)
        //--------------------------------------------------------------
        void setVolume(int, float);

        //--------------------------------------------------------------
        //  音楽のクリア
        //--------------------------------------------------------------
        void clear();

        //--------------------------------------------------------------
        //  SoundStateの取得
        //  int trackNo                     トラック番号 (0 ~ 31)
        //--------------------------------------------------------------
        DirectX::SoundState getState(int);

        //--------------------------------------------------------------
        //  ループの有無の取得
        //  int trackNo                     トラック番号 (0 ~ 31)
        //--------------------------------------------------------------
        bool isLooped(int);

        //--------------------------------------------------------------
        //  panの設定
        //  int trackNo                     トラック番号 (0 ~ 31)
        //  float pan                       pan (-1.0f ~ 1.0f)
        //--------------------------------------------------------------
        void setPan(int, float);

        //--------------------------------------------------------------
        //  pitchの設定
        //  int trackNo                     トラック番号 (0 ~ 31)
        //  float pitch                     pitch (-1.0f ~ 1.0f)
        //--------------------------------------------------------------
        void setPitch(int, float);

        //--------------------------------------------------------------
        //  フォーマットの取得
        //  int trackNo                     トラック番号 (0 ~ 31)
        //--------------------------------------------------------------
        const WAVEFORMATEX* getFormat(int);

        //--------------------------------------------------------------
        //  音楽が使用中かどうか
        //  int trackNo                     トラック番号 (0 ~ 31)
        //--------------------------------------------------------------
        bool isInUse(int);
    }

    namespace system
    {
        static const float SCREEN_WIDTH = 1920.f;  // スクリーンの幅
        static const float SCREEN_HEIGHT = 1080.f; // スクリーンの高さ

        static const int TEXTURE_NUM = 256U;                   // テクスチャの最大枚数
        static const int DEBUG_INSTANCE_NUM = 8192U;           // デバッグ文字の最大表示数
        static const int PRIMITIVE_BATCH_INSTANCE_NUM = 4096U; // プリミティブバッチの最大インスタンス数
    }

    namespace texture
    {

    
        void init(size_t);

 
        void uninit();

 
        int load(const wchar_t*, size_t maxInstance = (1U));

   
        void load(int, const wchar_t*, size_t maxInstance = (1U));

  
        void load(const LoadTexture*);

   
        void release(int);

    
       
        void release(const LoadTexture*);

    
        void releaseAll();

     
        void begin(int);

   
        void end(int);

        //--------------------------------------------------------------
        //  テクスチャの描画
        //--------------------------------------------------------------
        //  int texNo                          テクスチャのインデックス
        //  float x, float y                   位置
        //  float scaleX, float scaleY         スケール
        //  float left, float top              切抜位置
        //  float width, float height          切抜サイズ
        //  float centerX, float centerY       中心
        //  float angle                        角度(radian)
        //  float r, float g, float b, float a 色
        //  bool  world                   true:ワールド座標に描画 false:スクリーン座標に描画
        //--------------------------------------------------------------
        void draw(int,
            float, float, float scaleX = (1), float scaleY = (1),
            float left = (0), float top = (0), float width = (0), float height = (0),
            float centerX = (0), float centerY = (0), float angle = (0),
            float r = (1), float g = (1), float b = (1), float a = (1),
            bool world = (false));

        //--------------------------------------------------------------
        //  テクスチャの描画
        //--------------------------------------------------------------
        //  int texNo                  テクスチャのインデックス
        //  const VECTOR2& position    位置
        //  const VECTOR2& scale       スケール
        //  const VECTOR2& texPos      切抜位置
        //  const VECTOR2& texSize     切抜サイズ
        //  const VECTOR2& center      中心
        //  float angle                角度(radian)
        //  const VECTOR4& color       色
        //  bool  world           true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void draw(int,
            const VECTOR2&, const VECTOR2& scale = (VECTOR2(1, 1)),
            const VECTOR2& texPos = (VECTOR2(0, 0)), const VECTOR2& texSize = (VECTOR2(0, 0)),
            const VECTOR2& center = (VECTOR2(0, 0)), float angle = 0,
            const VECTOR4& color = (VECTOR4(1, 1, 1, 1)),
            bool world = (false));

    }


    namespace view
    {

        //--------------------------------------------------------------
        //  入力マネージャの初期化
        //--------------------------------------------------------------
        void init();

        //--------------------------------------------------------------
        //  スケールを設定
        //--------------------------------------------------------------
        void setScale(float);

        //--------------------------------------------------------------
        //  スケールを取得
        //--------------------------------------------------------------
        float getScale();

        //--------------------------------------------------------------
        //  中央のワールド座標を設定
        //--------------------------------------------------------------
        void setCenter(float, float);
        void setCenter(VECTOR2);

        //--------------------------------------------------------------
        //  画面左上のワールド座標を設定
        //--------------------------------------------------------------
        void setLeftTop(float, float);
        void setLeftTop(VECTOR2);

        //--------------------------------------------------------------
        //  画面左下のワールド座標を設定
        //--------------------------------------------------------------
        void setLeftBottom(float, float);
        void setLeftTop(VECTOR2);

        //--------------------------------------------------------------
        //  画面中央のワールド座標を取得
        //--------------------------------------------------------------
        VECTOR2 getCenter();

        //--------------------------------------------------------------
        //  画面左上のワールド座標を取得
        //--------------------------------------------------------------
        VECTOR2 getLeftTop();

        //--------------------------------------------------------------
        //  画面左下のワールド座標を取得
        //--------------------------------------------------------------
        VECTOR2 getLeftBottom();

        //--------------------------------------------------------------
        //  画面の任意の座標にワールド座標を設定
        //--------------------------------------------------------------
        void setByPosition(VECTOR2, VECTOR2);

        //--------------------------------------------------------------
        //  Box2Dの座標をワールド座標に変換
        //--------------------------------------------------------------
        // VECTOR2 box2dToWorld(b2Vec2);

        //--------------------------------------------------------------
        //  ワールド座標をスクリーン座標へ変換
        //--------------------------------------------------------------
        VECTOR2 worldToScreen(VECTOR2);
        VECTOR3 worldToScreen(VECTOR3);

        //--------------------------------------------------------------
        //  スクリーン座標をワールド座標に変換
        //--------------------------------------------------------------
        VECTOR2 screenToWorld(VECTOR2);

        //--------------------------------------------------------------
        //  ワールド座標をBox2Dの座標に変換
        //--------------------------------------------------------------
        // b2Vec2 worldToBox2d(VECTOR2);

    }

    //==========================================================================
    //
    //		sound
    //
    //==========================================================================

    namespace sound
    {

        //--------------------------------------------------------------
        //  効果音ファイルのロード
        //--------------------------------------------------------------
        //  const wchar_t* xwbFileName  効果音ファイルのパス
        //  float volume                効果音のボリューム(0.0f ~ 1.0f)
        //--------------------------------------------------------------
        void load(const wchar_t*, float volume = (0.5f));

        //--------------------------------------------------------------
        //  効果音の再生
        //--------------------------------------------------------------
        //  int trackNo     効果音ファイルのインデックス
        //--------------------------------------------------------------
        void play(int);

        //--------------------------------------------------------------
        //  効果音のボリューム設定
        //--------------------------------------------------------------
        //  int trackNo    設定する効果音のインデックス(0 ~ 127)
        //  float volume   効果音のボリューム(0.0f ~ 1.0f)
        //--------------------------------------------------------------
        void setVolume(int, float);
    }

    namespace window
    {

        //--------------------------------------------------------------
        //  ウインドウ初期設定（ウインドウを作成して表示する）
        //--------------------------------------------------------------
        //  LPCTSTR caption     タイトルバーに表示される見出し
        //  int width           ウインドウの幅
        //  int height          ウインドウの高さ
        //--------------------------------------------------------------
        //  戻り値：HWND         生成されたウインドウのハンドル
        //--------------------------------------------------------------
        HWND init(LPCTSTR, int, int);

        //--------------------------------------------------------------
        //  ウインドウ終了処理
        //--------------------------------------------------------------
        void uninit();

    }


    namespace input
    {

        //--------------------------------------------------------------
        //  入力マネージャの初期化
        //--------------------------------------------------------------
        void init();

        //--------------------------------------------------------------
        //  入力マネージャの更新
        //--------------------------------------------------------------
        void update();

        //--------------------------------------------------------------
        //  トリガー（押した瞬間）情報の取得
        //--------------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //--------------------------------------------------------------
        //  戻り値：int     指定したプレイヤーのトリガー情報
        //--------------------------------------------------------------
        int TRG(int);

        //--------------------------------------------------------------
        //  トリガー（離した瞬間）情報の取得
        //--------------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //--------------------------------------------------------------
        //  戻り値：int     指定したプレイヤーのトリガー情報
        //--------------------------------------------------------------
        int TRG_RELEASE(int);

        //--------------------------------------------------------------
        //  ステート（状態）情報の取得
        //--------------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //--------------------------------------------------------------
        //  戻り値：int     指定したプレイヤーのステート情報
        //--------------------------------------------------------------
        int STATE(int);

        //--------------------------------------------------------------
        //  リピート（繰返し）情報の取得
        //--------------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //--------------------------------------------------------------
        //  戻り値：int     指定したプレイヤーのリピート情報
        //--------------------------------------------------------------
        int REPEAT(int);

        //--------------------------------------------------------------
        //  マウスカーソルのx座標を取得
        //--------------------------------------------------------------
        //  戻り値：int     マウスカーソルのx座標
        //--------------------------------------------------------------
        int getCursorPosX();

        //--------------------------------------------------------------
        //  マウスカーソルのy座標を取得
        //--------------------------------------------------------------
        //  戻り値：int     マウスカーソルのy座標
        //--------------------------------------------------------------
        int getCursorPosY();

        //--------------------------------------------------------------
        //  コントローラー情報の取得
        //--------------------------------------------------------------
        //  int player      何コンか(0 ~ 3)
        //--------------------------------------------------------------
        //  戻り値：GameLib::PadState*  指定したプレイヤーのコントローラー情報
        //--------------------------------------------------------------
        PadState* getPadState(int);

    }

    namespace primitive
    {

        //--------------------------------------------------------------
        //  矩形描画
        //--------------------------------------------------------------
        //  float x         描画位置x     float y        描画位置y
        //  float w         幅            float h        高さ
        //  float centerX   基準点x       float centerY  基準点y
        //  float angle     角度 (radian)
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //  bool world true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void rect(float, float, float, float,
            float cx = (0), float cy = (0), float angle = (0),
            float r = (1), float g = (1), float b = (1), float a = (1),
            bool world = (false));

        //--------------------------------------------------------------
        //  矩形描画
        //--------------------------------------------------------------
        //  const VECTOR2& pos      描画位置 (x, y)
        //  const VECTOR2& size     幅高さ   (w, h)
        //  const VECTOR2& center   基準点   (x, y)
        //  float angle             角度     (radian)
        //  const VECTOR4& color    色       (r, g, b, a) (0.0f ~ 1.0f)
        //  bool  world        true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void rect(const VECTOR2&, const VECTOR2&,
            const VECTOR2& center = (VECTOR2(0, 0)), float angle = (0),
            const VECTOR4& color = (VECTOR4(1, 1, 1, 1)),
            bool world = (false));

        //--------------------------------------------------------------
        //  線描画
        //--------------------------------------------------------------
        //  float x1        始点 x    float y1    // 始点 y
        //  float x2        終点 x    float y2    // 終点 y
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //  float width     幅
        //  bool world true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void line(float, float, float, float,
            float r = (1), float g = (1), float b = (1), float a = (1),
            float width = (1),
            bool world = (false));

        //--------------------------------------------------------------
        //  線描画
        //--------------------------------------------------------------
        //  const VECTOR2& from     始点 (x, y)
        //  const VECTOR2& to       終点 (x, y)
        //  const VECTOR4& color    色   (r, g, b, a)
        //  float width             幅
        //  bool world         true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void line(const VECTOR2&, const VECTOR2&,
            const VECTOR4& color = (VECTOR4(1, 1, 1, 1)), float width = (1),
            bool world = (false));

        //--------------------------------------------------------------
        //  円描画
        //--------------------------------------------------------------
        //  float x         中心位置 x    float y      // 中心位置 y
        //  float radius    半径
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //  int n           何角形か
        //  bool world true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void circle(float, float, float,
            float r = (1), float g = (1), float b = (1), float a = (1),
            int n = (32),
            bool world = (false));

        //--------------------------------------------------------------
        //  円描画
        //--------------------------------------------------------------
        //  const VECTOR2& pos      中心位置 (x, y)
        //  float radius            半径
        //  const VECTOR4& color    色   (r, g, b, a)
        //  int n                   何角形か
        //  bool world         true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void circle(const VECTOR2&, float,
            const VECTOR4& color = (VECTOR4(1, 1, 1, 1)), int n = (PRIMITIVE_CIRCLE_SIDE_NUM),
            bool world = (false));

        //--------------------------------------------------------------
        //  四角ポリゴン描画（頂点指定）
        //--------------------------------------------------------------
        //  const VECTOR2(&v)[4]    頂点の配列（大きさ4）
        //  float r         色 r (0.0f ~ 1.0f)
        //  float g         色 g (0.0f ~ 1.0f)
        //  float b         色 b (0.0f ~ 1.0f)
        //  float a         色 a (0.0f ~ 1.0f)
        //  bool world true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void quad(const VECTOR2(&)[4],
            float r = (1), float g = (1), float b = (1), float a = (1),
            bool world = (false));

        //--------------------------------------------------------------
        //  四角ポリゴン描画（頂点指定）
        //--------------------------------------------------------------
        //  const VECTOR2(&v)[4]    頂点の配列（大きさ4）
        //  const VECTOR4& color    色 (r, g, b, a)
        //  bool  world        true:ワールド座標に描画 false : スクリーン座標に描画
        //--------------------------------------------------------------
        void quad(const VECTOR2(&)[4],
            const VECTOR4& color = (VECTOR4(1, 1, 1, 1)),
            bool world = (false));

        void draw_triangle_fan(VECTOR2[], const VECTOR4&, int nPolygon,
            bool world = (false));
    }

}